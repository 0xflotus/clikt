package com.github.ajalt.clikt.completion

import com.github.ajalt.clikt.core.CliktCommand

/**
 * [CompletionGenerator] for Bash.
 */
internal object BashCompletionGenerator : CompletionGenerator {
    private fun allCompletionStrings(command: CliktCommand): Set<String> =
    // sorry...
            (sequenceOf(command) + generateSequence(command._subcommands) { it.flatMap { it._subcommands } }.flatten())
                    .flatMap {
                        it._options.asSequence().flatMap { it.names.asSequence() } +
                                if (it == command) emptySequence() else sequenceOf(it.commandName)
                    }
                    .toSet()

    override fun generateCompletion(command: CliktCommand): String {
        val commandName = command.commandName
        val funcName = commandName.replace('-', '_')
        val allStrings = allCompletionStrings(command)

        if (allStrings.isEmpty()) return ""

        val optionStrings = allStrings.filter { it.startsWith("--") }
        val subcommandStrings = allStrings.filter { !it.startsWith("-") }

        return buildString {
            append("""
            |#!/usr/bin/env bash
            |# Completion function for $commandName
            |# Generated by Clikt
            |_$funcName() {
            |    local cur prev w
            |
            """.trimMargin())

            if (optionStrings.isNotEmpty()) {
                append("""
                   |if [[ "${"$"}{COMP_WORDS[${"$"}COMP_CWORD]}" = -* ]]; then
                   |    COMPREPLY=(${'$'}(compgen -W '
                   """.trimMargin())
                optionStrings.joinTo(this, " ")
                append("""' -- "${"$"}{COMP_WORDS[${"$"}COMP_CWORD]}"))
                   |    return
                   |fi
                    """.trimMargin())
            }

            if (subcommandStrings.isNotEmpty()) {
                append("""
                    |    COMPREPLY=(${'$'}(compgen -W '
                                       """.trimMargin())
                subcommandStrings.joinTo(this, " ")
                append("""' -- "${"$"}{COMP_WORDS[${"$"}COMP_CWORD]}"))""")
            }

            append("""
            |}
            |complete -F _$funcName $commandName
            """.trimMargin())
        }
    }
}
